Index: weather_forecast.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/weather_forecast.py b/weather_forecast.py
new file mode 100644
--- /dev/null	(date 1681492134259)
+++ b/weather_forecast.py	(date 1681492134259)
@@ -0,0 +1,108 @@
+import requests
+import json
+from datetime import datetime
+import time
+import traceback
+import sqlalchemy as sqla
+from sqlalchemy import create_engine, DateTime
+
+# Database connection
+URI = "dbbikes.ci3iggfwlke6.eu-west-1.rds.amazonaws.com"
+PORT = "3306"
+DB = "dbbikes"
+USER = "admin"
+PASSWORD = "00000000"
+
+# API key and URL for weather
+APIKEY_WEATHER = "61134c8141c567f71f41c90662a798cf"
+URL_WEATHER = f"https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid={APIKEY_WEATHER}"
+
+engine = create_engine(f"mysql+mysqlconnector://{USER}:{PASSWORD}@{URI}:{PORT}/{DB}", echo=True, connect_args={'autocommit': True})
+
+# Create a database table for weather data
+metadata = sqla.MetaData()
+
+weather = sqla.Table("weather_forecast", metadata,
+    sqla.Column('weather_id', sqla.Integer),
+    sqla.Column('weather_main', sqla.String(256)),
+    sqla.Column('weather_description', sqla.String(256)),
+    sqla.Column('weather_icon', sqla.String(256)),
+    sqla.Column('temp', sqla.REAL),
+    sqla.Column('pressure', sqla.Integer),
+    sqla.Column('humidity', sqla.Integer),
+    sqla.Column('temp_min', sqla.REAL),
+    sqla.Column('temp_max', sqla.REAL),
+    sqla.Column('visibility', sqla.Integer),
+    sqla.Column('wind_speed', sqla.REAL),
+    sqla.Column('wind_deg', sqla.Integer),
+    sqla.Column('clouds_all', sqla.Integer),
+    sqla.Column('dt', sqla.Integer),
+    sqla.Column('sys_country', sqla.String(256)),
+    sqla.Column('sys_sunrise', sqla.Integer),
+    sqla.Column('sys_sunset', sqla.Integer),
+    sqla.Column('timezone', sqla.Integer),
+    sqla.Column('city_id', sqla.Integer),
+    sqla.Column('city_name', sqla.String(256)),
+    sqla.Column('cod', sqla.Integer),
+    sqla.Column('rain_1h', sqla.REAL, nullable=True),
+    sqla.Column('snow_1h', sqla.REAL, nullable=True),
+    sqla.Column('timestamp', DateTime)
+)
+
+try:
+    weather.drop(engine)
+except:
+    pass
+
+metadata.create_all(engine)
+
+def write_weather_data_to_db():
+    while True:
+        try:
+            now = datetime.now()
+            r = requests.get(URL_WEATHER, params={"lat": 53.3498, "lon": -6.2603, "appid": APIKEY_WEATHER})
+            data = json.loads(r.text)
+
+            weather_item = {
+                'weather_id': data['current']['weather'][0]['id'],
+                'weather_main': data['current']['weather'][0]['main'],
+                'weather_description': data['current']['weather'][0]['description'],
+                'weather_icon': data['current']['weather'][0]['icon'],
+                'temp': data['current']['temp'],
+                'pressure': data['current']['pressure'],
+                'humidity': data['current']['humidity'],
+                'temp_min': None,  # temp_min is not available in One Call API
+                'temp_max': None,  # temp_max is not available in One Call API
+                'visibility': data['current']['visibility'],
+                'wind_speed': data['current']['wind_speed'],
+                'wind_deg': data['current']['wind_deg'],
+                'clouds_all': data['current']['clouds'],
+                'dt': data['current']['dt'],
+                'sys_country': None,  # sys_country is not available in One Call API
+                'sys_sunrise': data['current']['sunrise'],
+                'sys_sunset': data['current']['sunset'],
+                'timezone': data['timezone'],
+                'city_id': None,  # city_id is not available in One Call API
+                'city_name': None,  # city_name is not available in One Call API
+                'cod': None,  # cod is not available in One Call API
+                'rain_1h': data['current']['rain']['1h'] if 'rain' in data['current'] and '1h' in data['current']['rain'] else None,
+                'snow_1h': data['current']['snow']['1h'] if 'snow' in data['current'] and '1h' in data['current']['snow'] else None,
+                'timestamp': now
+            }
+
+            # Create a connection and execute the query
+            with engine.connect() as connection:
+                connection.execute(weather.insert(), weather_item)
+
+            print(f"Inserted weather data at {now}")
+            time.sleep(60)
+        except Exception as e:
+            print(f"Error: {e}")
+            print(traceback.format_exc())
+
+
+
+if __name__ == '__main__':
+    write_weather_data_to_db()
+    # print(data)
+
Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
new file mode 100644
--- /dev/null	(date 1681461148481)
+++ b/test.py	(date 1681461148481)
@@ -0,0 +1,41 @@
+# import requests
+#
+# API_KEY = "96f45f6c176846a2d67618ef4dde129b"
+# url = f"https://api.openweathermap.org/data/3.0/onecall?lat=33.44&lon=-94.04&exclude=hourly,daily&appid={API_KEY}"
+#
+# r = requests.get(url)
+#
+# print(r)
+# print(r.text)
+#
+#
+# import requests
+#
+# API_KEY = "61134c8141c567f71f41c90662a798cf"
+# url = f"https://api.openweathermap.org/data/2.5/forecast?lat=44.34&lon=10.99&appid={API_KEY}"
+#
+# r = requests.get(url)
+#
+# print(r)
+# print(r.text)
+
+#
+# import requests
+#
+# API_KEY = "61134c8141c567f71f41c90662a798cf"
+# url = f"https://api.openweathermap.org/data/2.5/forecast/daily?lat=44.34&lon=10.99&cnt=7&appid={API_KEY}"
+#
+# r = requests.get(url)
+#
+# print(r)
+# print(r.text)
+
+import requests
+
+API_KEY = "61134c8141c567f71f41c90662a798cf"
+url = f"https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid={API_KEY}"
+
+r = requests.get(url)
+
+print(r)
+print(r.text)
